// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using markt.Api.Database;

namespace markt.Api.Database.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20180701172906_CategoryProduct")]
    partial class CategoryProduct
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.0-rtm-30799");

            modelBuilder.Entity("markt.Core.Entities.Campaign", b =>
                {
                    b.Property<int>("CampaignId")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CategoryId");

                    b.Property<int>("DiscountType");

                    b.Property<double>("DiscountValue");

                    b.Property<int>("MinimumCount");

                    b.HasKey("CampaignId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Campaigns");
                });

            modelBuilder.Entity("markt.Core.Entities.CartCampaigns", b =>
                {
                    b.Property<int>("CampaignId");

                    b.Property<int>("CartId");

                    b.HasKey("CampaignId", "CartId");

                    b.HasIndex("CartId");

                    b.ToTable("CartCampaigns");
                });

            modelBuilder.Entity("markt.Core.Entities.CartCoupons", b =>
                {
                    b.Property<int>("CartId");

                    b.Property<int>("CouponId");

                    b.HasKey("CartId", "CouponId");

                    b.HasIndex("CouponId");

                    b.ToTable("CartCoupons");
                });

            modelBuilder.Entity("markt.Core.Entities.CartProducts", b =>
                {
                    b.Property<int>("CartId");

                    b.Property<int>("ProductId");

                    b.HasKey("CartId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("CartProducts");
                });

            modelBuilder.Entity("markt.Core.Entities.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ParentCategoryId");

                    b.Property<string>("Title");

                    b.HasKey("CategoryId");

                    b.HasIndex("ParentCategoryId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("markt.Core.Entities.CategoryProducts", b =>
                {
                    b.Property<int>("CategoryId");

                    b.Property<int>("ProductId");

                    b.Property<int?>("ProductId1");

                    b.HasKey("CategoryId", "ProductId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductId1");

                    b.ToTable("CategoryProducts");
                });

            modelBuilder.Entity("markt.Core.Entities.Coupon", b =>
                {
                    b.Property<int>("CouponId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("DiscountType");

                    b.Property<double>("DiscountValue");

                    b.Property<double>("MinimumAmount");

                    b.HasKey("CouponId");

                    b.ToTable("Coupons");
                });

            modelBuilder.Entity("markt.Core.Entities.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CategoryId");

                    b.Property<double>("Price");

                    b.Property<string>("Title");

                    b.HasKey("ProductId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("markt.Core.Entities.ShoppingCart", b =>
                {
                    b.Property<int>("CartId")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("CartPrice");

                    b.HasKey("CartId");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("markt.Core.Entities.Campaign", b =>
                {
                    b.HasOne("markt.Core.Entities.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId");
                });

            modelBuilder.Entity("markt.Core.Entities.CartCampaigns", b =>
                {
                    b.HasOne("markt.Core.Entities.Campaign", "Campaign")
                        .WithMany()
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("markt.Core.Entities.ShoppingCart", "Cart")
                        .WithMany("Campaigns")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("markt.Core.Entities.CartCoupons", b =>
                {
                    b.HasOne("markt.Core.Entities.ShoppingCart", "Cart")
                        .WithMany("Coupons")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("markt.Core.Entities.Coupon", "Coupon")
                        .WithMany()
                        .HasForeignKey("CouponId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("markt.Core.Entities.CartProducts", b =>
                {
                    b.HasOne("markt.Core.Entities.ShoppingCart", "Cart")
                        .WithMany("Products")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("markt.Core.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("markt.Core.Entities.Category", b =>
                {
                    b.HasOne("markt.Core.Entities.Category", "ParentCategory")
                        .WithMany()
                        .HasForeignKey("ParentCategoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("markt.Core.Entities.CategoryProducts", b =>
                {
                    b.HasOne("markt.Core.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("markt.Core.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId1");
                });

            modelBuilder.Entity("markt.Core.Entities.Product", b =>
                {
                    b.HasOne("markt.Core.Entities.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
